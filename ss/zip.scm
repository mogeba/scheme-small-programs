(define (zip lsts)
  (letrec ((cars (lambda (acc lsts)
                   (if (empty? lsts)
                     (reverse acc)
                     (if (ormap empty? lsts)
                       (reverse acc)
                       (cars (cons (caar lsts) acc)
                             (cdr lsts))))))
           (cdrs (lambda (acc lsts)
                   (if (empty? lsts)
                     (reverse acc)
                     (if (ormap empty? lsts)
                       (reverse acc)
                       (cdrs (cons (cdar lsts) acc)
                             (cdr lsts))))))
           (loop (lambda (acc lsts)
                   (if (ormap empty? lsts)
                     (reverse acc)
                     (loop (cons (cars empty lsts) acc)
                           (cdrs empty lsts))))))
    (loop empty lsts)))

(define lst '((1 2 3 4 5) (4 5 6) (7 8 9 X Y Z) (a b c) (d e f)))
lst       ; 3x5 
(zip lst) ; 5x3
